2/2/2018
David Malan from Harvard University.

Week 1: From Scratch to C.

JS
console.log("hello, world");

When green flag clicked in Scratch:

int main(void)


VOCAB:
stdio = standard input output
include = hey computer please include... etc


The forever loop in Scratch:
while (true)
{
  printf("hello, world\n");
}


The repeat loop in Scratch:
for (int i = 0; i < 50: i++)
{
  printf("hello, world\n");
}


The if else in Scratch:
if (x < y)
{
  printf("x is less than y\n");
}
else if (x > y)
{
  printf("x is greater than y\n");
}
else
{
  printf("x is equal to y\n");
}


We are writing source code and that needs to be converted to machine code
through compilers.

source code -> compiler -> machine code

We will use cs50's IDE for C programming.
IDE = integrated development environment

hello.c
(General convention: always underscore and no spaces.)

clang hello.c will compile a file: a.out

If you wanted to name the file:
clang -o hello hello.c

In the IDE the green color font with the * next to it means its an
executable file.

Some C functions provided in the <cs50.h> library:
get_char
get_double
get_float
get_int
get_long_long
get_string

printf("hello, %s\n", s);
%s means "put some string here"

<cs50.h> is a header file. It's a summary of the functionality of what
you have access.

DATATYPES reviewed:
strings
integers
floats

If you wanted to add more decimal points then type it like: "%.10f"

'Y'
single quotes is used when you have single characters

"Answer: "
double quotes is used when you have multiple characters

Functions in C doesn't HOIST! :O

Integers are 32bit and can only store upto 4 billion
Anything over will reset to 0 "overflow"

This has to do with (RAM) memory being finite.

You can also "underflow". So 1 minus 2 (8bits) would make it 255.

while loop:

while (condition)
{
	// something happens
}

do-while loops (executes at least once):

do
{
	// something
}
while (condition)

for loop:

for (int i = 0; i < 50; i++)
{
	// something
}

Greedy Algorithm: "Always takes the best immediate,
or local, solution while finding an answer."
For cashiers, it minimizes number of coins due.

Luhn's Algorithm: Way to determine if a credit card number
is syntactically valid.

0. Multiply every other digit by 2, starting with the number's
second-to-last digit, and then add those product's digits together.

1. Add the sum to the sum of the digits that weren't multiplied by 2.

2. If the total's last digit is 0 (or, put more formally, if the total
modulo is congruent to 0), the number is valid.
